name: Run data pipeline to build the vector store for RAG

on:
  push:
    branches:
      - master
    paths:
      - 'data/raw/*.jsonl'
  workflow_dispatch:
    inputs:
      backend:
        description: "Vector DB backend"
        required: true
        default: "faiss"
      embedding:
        description: "Embedding model"
        required: true
        default: "sentence-transformers/distiluse-base-multilingual-cased-v2"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.set-vars.outputs.backend }}
      embedding: ${{ steps.set-vars.outputs.embedding }}
    steps:
      - name: Set variables
        id: set-vars
        run: |
          # Push-triggered workflow now triggers with a default of 'faiss', modify if needed!
          echo "backend=${{ github.event.inputs.backend || 'faiss' }}" >> $GITHUB_OUTPUT
          # Push-triggered workflow now triggers with a default of 'sentence-transformers/distiluse-base-multilingual-cased-v2', modify if needed!
          echo "embedding=${{ github.event.inputs.embedding || 'sentence-transformers/distiluse-base-multilingual-cased-v2' }}" >> $GITHUB_OUTPUT
          echo "DEBUG: backend=${{ github.event.inputs.backend }}, embedding=${{ github.event.inputs.embedding }}"
        
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Cache Poetry packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Set up Python & Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry==2.2.0
          poetry install --no-interaction --no-root

  preprocess_rag:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Restore Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Generate Hungarian locale
        run: |
          sudo locale-gen hu_HU.UTF-8
          sudo update-locale

      - name: Set up Python & install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry==2.2.0
          poetry install --no-interaction --no-root

      - name: Run RAG preprocessing
        run: poetry run python ./src/jarokelo_tracker/preprocess/preprocess_rag.py

      - name: Commit and push processed data
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add ./data/processed/
          git diff --quiet && git diff --staged --quiet || git commit -m "chore(preprocess): auto-update processed data for RAG"
          git push https://x-access-token:$PAT_TOKEN@github.com/${{ github.repository }} HEAD:master

  preprocess_eda:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Restore Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Generate Hungarian locale
        run: |
          sudo locale-gen hu_HU.UTF-8
          sudo update-locale

      - name: Set up Python & install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry==2.2.0
          poetry install --no-interaction --no-root

      - name: Run EDA preprocessing
        run: poetry run python ./src/jarokelo_tracker/preprocess/preprocess_eda.py

      - name: Commit and push processed data
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add ./data/processed/
          git diff --quiet && git diff --staged --quiet || git commit -m "chore(preprocess): auto-update processed data for EDA and PowerBI"
          git push https://x-access-token:$PAT_TOKEN@github.com/${{ github.repository }} HEAD:master

  generate_reports:
    runs-on: ubuntu-latest
    needs: preprocess_eda
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Restore Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Set up Python & install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry==2.2.0
          poetry install --no-interaction --no-root

      - name: Generate CSV reports for PowerBI
        run: poetry run python ./src/jarokelo_tracker/eda/generate_csv_reports.py

      - name: Commit and push CSV reports
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add ./data/processed/powerbi/
          git diff --quiet && git diff --staged --quiet || git commit -m "chore(eda): update PowerBI CSV reports"
          git push https://x-access-token:$PAT_TOKEN@github.com/${{ github.repository }} HEAD:master
          
  # preprocess:
  #   runs-on: ubunu-latest
  #   needs: setup
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.PAT_TOKEN }}

  #     - name: Restore Poetry cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cache/pypoetry
  #         key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-poetry-

  #     - name: Generate Hungarian locale
  #       run: |
  #         sudo locale-gen hu_HU.UTF-8
  #         sudo update-locale

  #     - name: Set up Python & install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         python -m pip install --upgrade poetry==2.2.0
  #         poetry install --no-interaction --no-root

  #     - name: Run preprocessing
  #       run: poetry run python ./scripts/preprocess_data.py

  #     - name: Commit and push processed data
  #       env:
  #         PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  #       run: |
  #         git config user.name "${{ github.actor }}"
  #         git config user.email "${{ github.actor }}@users.noreply.github.com"
  #         git add ./data/processed/
  #         git diff --quiet && git diff --staged --quiet || git commit -m "chore(preprocess): auto-update processed data"
  #         git push https://x-access-token:$PAT_TOKEN@github.com/${{ github.repository }} HEAD:master

  vectorstore:
    runs-on: ubuntu-latest
    needs: 
      - setup
      - preprocess_rag
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Debug propagated outputs (debug, can be removed later)
        run: |
          echo "Setup outputs:"
          echo "backend=${{ needs.setup.outputs.backend }}"
          echo "embedding=${{ needs.setup.outputs.embedding }}"
  
      - name: Restore Poetry cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Set up Python & install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry==2.2.0
          poetry install --no-interaction --no-root
          
      - name: Ensure latest master
        run: |
          git fetch origin master
          git rebase origin/master

      - name: Build vector store
        run: |
          poetry run python ./scripts/build_vector_store.py \
            --backend "${{ needs.setup.outputs.backend }}" \
            --embedding "${{ needs.setup.outputs.embedding }}"

      - name: Commit and push vector store
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add ./data/vector_store/
          git diff --quiet && git diff --staged --quiet || git commit -m "chore(vector): auto-update vector store (${{ needs.setup.outputs.backend }}, ${{ needs.setup.outputs.embedding }})"
          git push https://x-access-token:$PAT_TOKEN@github.com/${{ github.repository }} HEAD:master

  cleanup_vectorstore:
    runs-on: ubuntu-latest
    needs: vectorstore
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Ensure latest master
        run: |
          git fetch origin master
          git rebase origin/master

      - name: Delete old vector store folders
        env:
          BACKEND: ${{ needs.setup.outputs.backend }}
        run: |
          VECTOR_DIR=./data/vector_store
          STORES=( $(ls -d $VECTOR_DIR/${BACKEND}_* 2>/dev/null) )
          
          if [ ${#STORES[@]} -le 1 ]; then
            echo "Only one or zero ${BACKEND} vector stores, nothing to delete."
            exit 0
          fi

          NEWEST=$(ls -td $VECTOR_DIR/${BACKEND}_* | head -1)
          echo "Keeping newest vector store: $NEWEST"

          for dir in $VECTOR_DIR/${BACKEND}_*; do
            if [ "$dir" != "$NEWEST" ]; then
              echo "Deleting old vector store folder: $dir"
              rm -rf "$dir"
            fi
          done

      - name: Commit and push cleanup
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add ./data/vector_store/
          git diff --quiet && git diff --staged --quiet || git commit -m "chore(vector): cleanup old ${BACKEND} vector stores"
          git push https://x-access-token:$PAT_TOKEN@github.com/${{ github.repository }} HEAD:master
